---
version: 2.1
jobs:
  run_pre_commit:
    docker:
      - image: quay.io/astronomer/ci-pre-commit:2022-01
    steps:
      - checkout
      - run:
          name: Create pre-commit-cache-key.txt
          command: |
            cp .pre-commit-config.yaml /tmp/pre-commit-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - pre-commit-cache-{{ checksum "/tmp/pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit hooks
          command: pre-commit install-hooks
      - save_cache:
          key: pre-commit-cache-{{ checksum "/tmp/pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files --show-diff-on-failure
  build:
    executor: docker-executor
    steps:
      - docker-build:
          image_name: ap-certgenerator
          dockerfile: Dockerfile
  scan-trivy:
    docker:
      - image: docker:20.10-git
    steps:
      - trivy-scan:
          image_name: ap-certgenerator
  docker-push-main:
    executor: docker-executor
    steps:
      - docker-registry-push:
          comma_separated_tags: "main,latest"
          image_name: ap-certgenerator
  docker-push-branch-tag:
    executor: docker-executor
    steps:
      - docker-registry-push:
          comma_separated_tags: "$CIRCLE_BRANCH"
          image_name: ap-certgenerator
  functional-test:
    machine:
      image: ubuntu-2004:202104-01
      resource_class: large
    steps:
      - functional-test:
          image_name: ap-certgenerator
  release:
    executor: docker-executor
    steps:
      - checkout
      - get-next-tag:
          image_name: ap-certgenerator
      - docker-registry-push:
          comma_separated_tags: "$NEXT_TAG,$CIRCLE_BRANCH"
          image_name: ap-certgenerator
      # Publish a GitHub release on this repository,
      # automatically generating a change log.
      - publish-github-release
workflows:
  test:
    jobs:
      - run_pre_commit
      - build
      - functional-test:
          requires:
            - build
      - scan-trivy:
          requires:
            - build
      - docker-push-main:
          context:
            - quay.io
            - docker.io
          requires:
            - functional-test
            - scan-trivy
          filters:
            branches:
              only: main
      - docker-push-branch-tag:
          context:
            - quay.io
            - docker.io
          requires:
            - functional-test
            - scan-trivy
          filters:
            branches:
              only:
                - '/release-0\.\d+/'
      - approve-release:
          type: approval
          filters:
            branches:
              only:
                - '/release-0\.\d+/'
      - release:
          context:
            - docker.io
            - github-repo
            - quay.io
          requires:
            - functional-test
            - scan-trivy
            - approve-release
          filters:
            branches:
              only:
                - '/release-0\.\d+/'
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
      DOCKER_REPO: astronomerinc
    docker:
      - image: circleci/python:3
commands:
  functional-test:
    description: "Run functional testing for certgenerator"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run component test
          command: |
            set -xe
            pyenv global 3.9.4
            sudo apt-get update
            sudo apt-get install -y libpq-dev python-dev
            docker load -i "/tmp/workspace/<< parameters.image_name >>.tar"
            cd tests/functionaltests
            pip install -r requirement.txt
            pytest . -v
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.2
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build \
              --label="io.astronomer.build.branch=$CIRCLE_BRANCH" \
              --label="io.astronomer.build.date=$(date +%F)" \
              --label="io.astronomer.build.job.id=$CIRCLE_BUILD_NUM" \
              --label="io.astronomer.build.job.name=$CIRCLE_JOB" \
              --label="io.astronomer.build.repo=$CIRCLE_REPOSITORY_URL" \
              --label="io.astronomer.build.sha=$CIRCLE_SHA1" \
              --label="io.astronomer.build.unixtime=$(date +%s)" \
              --label="io.astronomer.build.url=$CIRCLE_BUILD_URL" \
              --label="io.astronomer.build.workflow.id=$CIRCLE_WORKFLOW_ID" \
              --tag $image_name \
              --file << parameters.path>>/<< parameters.dockerfile >> \
              --build-arg BUILD_NUMBER=${CIRCLE_BUILD_NUM} \
              << parameters.path >>
            docker save -o << parameters.image_name >>.tar $image_name
            docker inspect "$image_name"
      - persist_to_workspace:
          root: .
          paths:
            - "./*.tar"
  trivy-scan:
    description: "Trivy: Vulnerability scanner a Docker image"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl rpm
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - restore_cache:
          keys:
            - trivy-cache
      - run:
          name: Scan the local image with trivy
          command: |
            trivy --cache-dir /tmp/workspace/trivy-cache image --ignore-unfixed -s HIGH,CRITICAL --exit-code 1 --no-progress << parameters.image_name >>
      - save_cache:
          key: trivy-cache
          paths:
            - /tmp/workspace/trivy-cache
  docker-registry-push:
    description: "Push all docker images and tags"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          version: 20.10.2
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: "Login to docker registries"
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin docker.io
            echo "$QUAY_PASSWORD" | docker login --username $QUAY_USERNAME --password-stdin quay.io
      - run:
          name: Push Docker image(s)
          command: |
            set -e
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              set -x
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              docker tag << parameters.image_name >> docker.io/astronomerinc/<< parameters.image_name >>:${tag}
              docker tag << parameters.image_name >> quay.io/astronomer/<< parameters.image_name >>:${tag}
            done
            docker push quay.io/astronomer/<< parameters.image_name >>
            docker push docker.io/astronomerinc/<< parameters.image_name >>
            set +x
  publish-github-release:
    description: "Create a release on GitHub"
    parameters:
      tag:
        type: string
        default: "$NEXT_TAG"
      ghr_version:
        type: string
        default: "0.14.0"
    steps:
      - run:
          name: Create a release on GitHub
          command: |
            set -xe
            # Install ghr, a CLI tool for doing GitHub releases
            WORK_DIR=$PWD
            cd /tmp
            wget https://github.com/tcnksm/ghr/releases/download/v<< parameters.ghr_version >>/ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            tar -xvf ./ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            mkdir -p /tmp/bin
            mv ghr_v<< parameters.ghr_version >>_linux_amd64/ghr /tmp/bin/
            export PATH=/tmp/bin:$PATH
            cd $WORK_DIR
            # Generate release notes in Markdown format
            COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"* %ai %h: %s" | awk '{$4=""; print $0}')
            AUTHORS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%aE" | awk '!a[$0]++')
            cat \<<EOT > /tmp/release_notes.md
            ## Changes:
            $COMMITS
            ## Authors:
            $AUTHORS
            EOT
            echo "==================="
            cat /tmp/release_notes.md
            echo "==================="
            ghr \
              -t $GITHUB_TOKEN \
              -c $CIRCLE_SHA1 \
              -n v<< parameters.tag>> \
              -b "$(cat /tmp/release_notes.md)" \
              v<< parameters.tag>>
  get-next-tag:
    description: "Set an environment variable to this release branch with an incremented patch version"
    parameters:
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Determine the next patch version
          command: |
            set -xe
            pip install --user astronomer_e2e_test
            NEXT_TAG=$(astronomer-next-version --branch $CIRCLE_BRANCH \
                                               --repository << parameters.docker_repository >>  \
                                               --image << parameters.image_name >>)
            # Make this environment variable available to following steps
            echo "export NEXT_TAG=${NEXT_TAG}" >> $BASH_ENV
